---
// src/pages/admin/live.astro
import '../../styles/global.css';
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>Live Newsletter Subscribers - FreshWax Admin</title>
  </head>
  <body class="min-h-screen bg-gray-50 p-4">
    <div class="max-w-6xl mx-auto">
      <header class="mb-8 flex justify-between items-center">
        <div>
          <h1 class="text-3xl font-bold text-gray-900 mb-2">Live Newsletter Subscribers</h1>
          <p class="text-gray-600">Real-time data from your production database</p>
        </div>
        <div class="flex gap-2">
          <button 
            id="refreshBtn" 
            class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition duration-200 flex items-center gap-2"
          >
            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
            </svg>
            Refresh
          </button>
          <div id="autoRefreshToggle" class="flex items-center gap-2">
            <input type="checkbox" id="autoRefresh" class="rounded">
            <label for="autoRefresh" class="text-sm text-gray-600">Auto-refresh (30s)</label>
          </div>
        </div>
      </header>

      <!-- Loading State -->
      <div id="loadingState" class="text-center py-8">
        <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
        <p class="mt-4 text-gray-600">Loading subscriber data...</p>
      </div>

      <!-- Error State -->
      <div id="errorState" class="hidden bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg mb-6">
        <div class="flex items-center gap-2">
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
            <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd"></path>
          </svg>
          <span id="errorMessage">Failed to load data</span>
        </div>
      </div>

      <!-- Stats Cards -->
      <div id="statsSection" class="hidden grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-blue-100 rounded-lg">
              <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM9 3a2 2 0 11-4 0 2 2 0 014 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Total Subscribers</p>
              <p id="totalCount" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-green-100 rounded-lg">
              <svg class="w-6 h-6 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">Today</p>
              <p id="todayCount" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-purple-100 rounded-lg">
              <svg class="w-6 h-6 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">This Week</p>
              <p id="weekCount" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="p-2 bg-orange-100 rounded-lg">
              <svg class="w-6 h-6 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
              </svg>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-600">This Month</p>
              <p id="monthCount" class="text-2xl font-semibold text-gray-900">-</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Last Updated -->
      <div id="lastUpdated" class="hidden text-sm text-gray-500 mb-4">
        Last updated: <span id="lastUpdatedTime">-</span>
      </div>

      <!-- Subscribers Table -->
      <div id="subscribersSection" class="hidden bg-white rounded-lg shadow overflow-hidden">
        <div class="px-6 py-4 border-b border-gray-200">
          <h2 class="text-lg font-semibold text-gray-900">All Subscribers</h2>
        </div>
        
        <div class="overflow-x-auto">
          <table class="min-w-full divide-y divide-gray-200">
            <thead class="bg-gray-50">
              <tr>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">ID</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Subscribed</th>
                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              </tr>
            </thead>
            <tbody id="subscribersTableBody" class="bg-white divide-y divide-gray-200">
              <!-- Dynamic content will be inserted here -->
            </tbody>
          </table>
        </div>
      </div>

      <!-- Actions -->
      <div class="mt-8 flex gap-4">
        <a 
          href="/admin/subscribers" 
          class="bg-gray-600 text-white px-4 py-2 rounded-lg hover:bg-gray-700 transition duration-200"
        >
          Local Admin
        </a>
        <a 
          href="/admin/remote" 
          class="bg-purple-600 text-white px-4 py-2 rounded-lg hover:bg-purple-700 transition duration-200"
        >
          Static Remote Admin
        </a>
        <a 
          href="/subscribe" 
          class="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition duration-200"
        >
          Subscription Form
        </a>
        <a 
          href="/" 
          class="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 transition duration-200"
        >
          Back to Site
        </a>
      </div>
    </div>

    <script>
      class AdminDashboard {
        constructor() {
          this.apiBase = 'https://email-handler.freshwax.co.uk';
          this.refreshInterval = null;
          this.init();
        }

        init() {
          this.bindEvents();
          this.loadData();
        }

        bindEvents() {
          document.getElementById('refreshBtn').addEventListener('click', () => {
            this.loadData();
          });

          const autoRefreshCheckbox = document.getElementById('autoRefresh');
          autoRefreshCheckbox.addEventListener('change', (e) => {
            if (e.target.checked) {
              this.startAutoRefresh();
            } else {
              this.stopAutoRefresh();
            }
          });
        }

        startAutoRefresh() {
          this.refreshInterval = setInterval(() => {
            this.loadData();
          }, 30000); // 30 seconds
        }

        stopAutoRefresh() {
          if (this.refreshInterval) {
            clearInterval(this.refreshInterval);
            this.refreshInterval = null;
          }
        }

        async loadData() {
          try {
            this.showLoading();
            this.hideError();

            // Load stats and subscribers in parallel
            const [statsResponse, subscribersResponse] = await Promise.all([
              fetch(`${this.apiBase}/admin/stats`),
              fetch(`${this.apiBase}/admin/subscribers`)
            ]);

            if (!statsResponse.ok || !subscribersResponse.ok) {
              throw new Error('Failed to fetch data from API');
            }

            const stats = await statsResponse.json();
            const subscribersData = await subscribersResponse.json();

            this.updateStats(stats);
            this.updateSubscribers(subscribersData.subscribers);
            this.updateLastUpdated(stats.lastUpdated);

            this.showContent();

          } catch (error) {
            console.error('Error loading dashboard data:', error);
            this.showError('Failed to load dashboard data. Make sure your Worker is deployed and accessible.');
          }
        }

        updateStats(stats) {
          document.getElementById('totalCount').textContent = stats.total || 0;
          document.getElementById('todayCount').textContent = stats.today || 0;
          document.getElementById('weekCount').textContent = stats.thisWeek || 0;
          document.getElementById('monthCount').textContent = stats.thisMonth || 0;
        }

        updateSubscribers(subscribers) {
          const tbody = document.getElementById('subscribersTableBody');
          
          if (!subscribers || subscribers.length === 0) {
            tbody.innerHTML = `
              <tr>
                <td colspan="5" class="px-6 py-8 text-center text-gray-500">
                  No subscribers yet. Share your subscription link to get started!
                </td>
              </tr>
            `;
            return;
          }

          tbody.innerHTML = subscribers.map(subscriber => `
            <tr class="hover:bg-gray-50">
              <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">${subscriber.id}</td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm font-medium text-gray-900">${subscriber.email}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">${subscriber.name || '-'}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <div class="text-sm text-gray-900">${this.formatDate(subscriber.subscribed_at)}</div>
              </td>
              <td class="px-6 py-4 whitespace-nowrap">
                <span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                  subscriber.status === 'active' 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-gray-100 text-gray-800'
                }">
                  ${subscriber.status || 'active'}
                </span>
              </td>
            </tr>
          `).join('');
        }

        updateLastUpdated(timestamp) {
          if (timestamp) {
            const date = new Date(timestamp);
            document.getElementById('lastUpdatedTime').textContent = date.toLocaleString('en-GB');
          }
        }

        formatDate(dateString) {
          if (!dateString) return 'Unknown';
          const date = new Date(dateString);
          return date.toLocaleDateString('en-GB', {
            day: '2-digit',
            month: 'short',
            year: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
          });
        }

        showLoading() {
          document.getElementById('loadingState').classList.remove('hidden');
          document.getElementById('statsSection').classList.add('hidden');
          document.getElementById('subscribersSection').classList.add('hidden');
          document.getElementById('lastUpdated').classList.add('hidden');
        }

        showContent() {
          document.getElementById('loadingState').classList.add('hidden');
          document.getElementById('statsSection').classList.remove('hidden');
          document.getElementById('subscribersSection').classList.remove('hidden');
          document.getElementById('lastUpdated').classList.remove('hidden');
        }

        showError(message) {
          document.getElementById('loadingState').classList.add('hidden');
          document.getElementById('errorState').classList.remove('hidden');
          document.getElementById('errorMessage').textContent = message;
        }

        hideError() {
          document.getElementById('errorState').classList.add('hidden');
        }
      }

      // Initialize dashboard when page loads
      document.addEventListener('DOMContentLoaded', () => {
        new AdminDashboard();
      });
    </script>
  </body>
</html>